{"version":3,"sources":["webpack:///./src/app/core/auth/auth.service.ts","webpack:///./src/app/core/auth/login.guard.ts","webpack:///./src/app/home/home.component.html","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/home/home.module.ts","webpack:///./src/app/home/home.routing.module.ts","webpack:///./src/app/home/signin/signin.component.html","webpack:///./src/app/home/signin/signin.component.ts","webpack:///./src/app/home/signup/my-validators/password-username.validator.ts","webpack:///./src/app/home/signup/signup.component.html","webpack:///./src/app/home/signup/signup.component.ts","webpack:///./src/app/home/signup/signup.service.ts","webpack:///./src/app/home/signup/user-not-taken.validator.service.ts","webpack:///./src/app/shared/validators/low-case.validator.ts"],"names":[],"mappings":"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","file":"home-home-module.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\n\nimport { UserService } from '../user/user.service';\nimport { environment } from '../../../environments/environment';\n\nconst api_base = environment.urlBase;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(\n      private http: HttpClient, \n      private userService: UserService\n      ) { }\n\n  autenticador(userName: string, password: string){\n    return this.http\n    //tap me faz conseguir acessar o header da resposta vinda do back-end, apos ter configurado no post, observe: \"response\"\n      .post(`${api_base}user/login`, {userName, password}, {observe: \"response\"})\n      .pipe(tap(res => {\n        this.userService.setToken(res.headers.get('x-access-token'));\n      }))\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { UserService } from '../user/user.service';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class LoginAuth implements CanActivate{\r\n\r\n    constructor(private userService: UserService, private route: Router) {}\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | Observable<boolean> | Promise<boolean> {\r\n        if(this.userService.logged()){\r\n            this.route.navigate(['lista', this.userService.getuserName()]);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n}","module.exports = \"<div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-6 mb-2\\\">\\r\\n            <img class=\\\"img-fluid d-none d-sm-block\\\"\\r\\n                src=\\\"../../assets/home.jpg\\\" alt=\\\"Welcome\\\">\\r\\n        </div>\\r\\n        <div class=\\\"col-md-6\\\">\\r\\n            <router-outlet></router-outlet>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    templateUrl: './home.component.html'\r\n})\r\nexport class HomeComponent {}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { SignInComponent } from './signin/signin.component';\r\nimport { VMessageModule } from '../shared/components/vmessage/vmessage.module';\r\nimport { SignupComponent } from './signup/signup.component';\r\nimport { HomeComponent } from './home.component';\r\nimport { HomeRoutingModule } from './home.routing.module';\r\nimport { SignupService } from './signup/signup.service';\r\nimport { UserNotTakenValidatorService } from './signup/user-not-taken.validator.service';\r\n\r\n@NgModule({\r\n    declarations: [SignInComponent, SignupComponent, HomeComponent],\r\n    imports: [\r\n        CommonModule, \r\n        ReactiveFormsModule, \r\n        VMessageModule,\r\n        RouterModule, \r\n        HomeRoutingModule\r\n    ],\r\n    providers: [\r\n        SignupService\r\n    ]\r\n})\r\nexport class HomeModule {}","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { HomeComponent } from './home.component';\r\n\r\nimport { SignInComponent } from './signin/signin.component';\r\nimport { SignupComponent } from './signup/signup.component';\r\nimport { LoginAuth } from '../core/auth/login.guard';\r\n\r\nconst rotas = [\r\n    {path: '', \r\n        component: HomeComponent, \r\n        canActivate: [LoginAuth],\r\n        children: [\r\n            {path: '', component: SignInComponent, data: {title: 'Login'}},\r\n            {path: 'cadastrar', component: SignupComponent, data: {title: 'Cadastro'}},\r\n        ]\r\n    }    \r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(rotas)],\r\n    exports: [RouterModule]\r\n})\r\nexport class HomeRoutingModule {}","module.exports = \"<h4 class=\\\"text-center\\\">Login</h4>\\r\\n\\r\\n<form [formGroup]='userLogin' class=\\\"form mt-4\\\" (submit)=\\\"login()\\\">\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <input #usuarioInput\\r\\n            formControlName='usuario'\\r\\n            class=\\\"form-control\\\" \\r\\n            placeholder=\\\"user name\\\" \\r\\n            autofocus>\\r\\n        <apj-vmessage *ngIf=\\\"userLogin.get('usuario').errors?.required\\\" \\r\\n        mensagem=\\\"User name is required!\\\"></apj-vmessage>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <input\\r\\n            formControlName='password' \\r\\n            type=\\\"password\\\" \\r\\n            class=\\\"form-control\\\" \\r\\n            placeholder=\\\"password\\\">\\r\\n        <apj-vmessage *ngIf=\\\"userLogin.get('password').errors?.required\\\" \\r\\n        mensagem=\\\"Password is required!\\\"></apj-vmessage>             \\r\\n    </div>\\r\\n\\r\\n    <button\\r\\n        [disabled]='userLogin.invalid'\\r\\n        type=\\\"submit\\\" \\r\\n        class=\\\"btn btn-primary btn-block\\\">\\r\\n        login\\r\\n    </button>\\r\\n\\r\\n</form>\\r\\n\\r\\n<p>Not a user? <a [routerLink]=\\\"['cadastrar']\\\">Register now</a></p>\"","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { AuthService } from 'src/app/core/auth/auth.service';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { PlatformDectectionService } from 'src/app/core/plataform-detector/platform-dectection.service';\r\n\r\n\r\n@Component({\r\n    templateUrl: 'signin.component.html'\r\n})\r\nexport class SignInComponent implements OnInit{\r\n    \r\n    url: string;\r\n    userLogin: FormGroup;\r\n    //consigo pegar uma referencia a um elemento do dom\r\n    @ViewChild('usuarioInput') usuarioInput: ElementRef<HTMLInputElement>\r\n    \r\n    constructor(\r\n        private formBilder: FormBuilder,\r\n        private authService: AuthService,\r\n        private router: Router,\r\n        private platformDetectorService: PlatformDectectionService,\r\n        private activetadRouter: ActivatedRoute\r\n        ) {}\r\n    \r\n    ngOnInit(): void {\r\n        this.activetadRouter.queryParams\r\n            .subscribe(params => this.url = params['fromUrl']);\r\n        this.userLogin = this.formBilder.group({\r\n            usuario: ['', Validators.required],\r\n            password: ['', Validators.required]\r\n        })\r\n    }\r\n\r\n    login(){\r\n        const usuario = this.userLogin.get('usuario').value;\r\n        const password = this.userLogin.get('password').value;\r\n\r\n        this.authService.autenticador(usuario, password)\r\n            .subscribe(() =>\r\n                this.url ? this.router.navigateByUrl(this.url) : this.router.navigate(['lista', usuario])\r\n            ,\r\n             erro=>{\r\n                 console.log(erro);\r\n                 this.platformDetectorService.isBrowser() && \r\n                    this.usuarioInput.nativeElement.focus();\r\n                 this.userLogin.reset();\r\n             })\r\n    }\r\n}","import { ValidatorFn, FormGroup } from '@angular/forms';\r\n\r\nexport const passwordUserNamevalidator: ValidatorFn = (formGroup: FormGroup)=>{\r\n\r\n    const password = formGroup.get('password').value;\r\n    const userName = formGroup.get('userName').value;\r\n\r\n    if(userName.trim() && password.trim()){\r\n        return password != userName ? null : {equals:true}\r\n    }else{\r\n        return null;\r\n    }\r\n}","module.exports = \"<h4 class=\\\"text-center\\\"> Register to embrace a new world!</h4>\\r\\n\\r\\n<form [formGroup]='signupForm' class=\\\"form mt-4\\\" (submit)=\\\"submit()\\\">\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <input formControlName='email' placeholder=\\\"email\\\" class=\\\"form-control\\\" autofocus >\\r\\n        <apj-vmessage *ngIf=\\\"signupForm.get('email').errors?.required\\\" mensagem='E-mail é obrigátorio'></apj-vmessage>\\r\\n        <apj-vmessage *ngIf=\\\"signupForm.get('email').errors?.email\\\" mensagem='E-mail inválido'></apj-vmessage>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <input formControlName='fullName' placeholder=\\\"full name\\\" class=\\\"form-control\\\">\\r\\n        <apj-vmessage *ngIf=\\\"signupForm.get('fullName').errors?.required\\\" mensagem='Nome completo é obrigátorio'></apj-vmessage>\\r\\n        <apj-vmessage *ngIf=\\\"signupForm.get('fullName').errors?.maxlength\\\" mensagem='Tamanho máximo são 40 caracteres'></apj-vmessage>\\r\\n        <apj-vmessage *ngIf=\\\"signupForm.get('fullName').errors?.minlength\\\" mensagem='Tamanho mínimo são de 2 caracteres'></apj-vmessage>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <input formControlName='userName' placeholder=\\\"user name\\\" class=\\\"form-control\\\">\\r\\n        <apj-vmessage *ngIf=\\\"signupForm.get('userName').errors?.required\\\" mensagem='UserName é obrigátorio'></apj-vmessage>\\r\\n\\r\\n        <apj-vmessage *ngIf=\\\"signupForm.get('userName').errors?.lowcase\\\" mensagem='UserName é inválido'></apj-vmessage>\\r\\n        <apj-vmessage *ngIf=\\\"signupForm.get('userName').errors?.userName\\\" mensagem='UserName indisponível'></apj-vmessage>\\r\\n\\r\\n        <apj-vmessage *ngIf=\\\"signupForm.get('userName').errors?.maxlength\\\" mensagem='Tamanho máximo são 30 caracteres'></apj-vmessage>\\r\\n    \\r\\n        <apj-vmessage *ngIf=\\\"signupForm.get('userName').errors?.minlength\\\" mensagem='Tamanho mínimo são de 2 caracteres'></apj-vmessage>\\r\\n    \\r\\n        <small *ngIf=\\\"signupForm.get('userName').valid\\\" class=\\\"text-success\\\">User available</small>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <input formControlName='password' type=\\\"password\\\" placeholder=\\\"password\\\" class=\\\"form-control\\\">\\r\\n        <apj-vmessage *ngIf=\\\"signupForm.get('password').errors?.required\\\" mensagem='Password é obrigátorio'></apj-vmessage>\\r\\n        <apj-vmessage *ngIf=\\\"signupForm.get('password').errors?.maxlength\\\" mensagem='Tamanho máximo são 30 caracteres'></apj-vmessage>\\r\\n        <apj-vmessage *ngIf=\\\"signupForm.get('password').errors?.minlength\\\" mensagem='Tamanho mínimo são de 6 caracteres'></apj-vmessage>\\r\\n        <apj-vmessage *ngIf=\\\"signupForm.errors?.equals\\\" mensagem='User Name e password devem ser diferemtes para a sua segurança'></apj-vmessage>\\r\\n    </div>\\r\\n\\r\\n    <button [disabled]='signupForm.invalid' class=\\\"btn btn-primary btn-block\\\">Register</button>\\r\\n\\r\\n    <p>Already a user? <a [routerLink]=\\\"['']\\\">Sign In!</a></p>\\r\\n</form>\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { UserNotTakenValidatorService } from './user-not-taken.validator.service';\r\nimport { lowCaseValidator } from 'src/app/shared/validators/low-case.validator';\r\nimport { NewUser } from './new-user';\r\nimport { SignupService } from './signup.service';\r\nimport { passwordUserNamevalidator } from './my-validators/password-username.validator';\r\n\r\n@Component({\r\n    templateUrl: './signup.component.html',\r\n    providers: [UserNotTakenValidatorService]\r\n})\r\nexport class SignupComponent implements OnInit{\r\n\r\n    signupForm:FormGroup;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private userNotTakenValidatorService: UserNotTakenValidatorService,\r\n        private signupService: SignupService,\r\n        private router: Router\r\n        ) {}\r\n    \r\n    ngOnInit(){\r\n        this.signupForm = this.formBuilder.group({\r\n           email: [\r\n               '',\r\n               [\r\n                   Validators.required,\r\n                   Validators.email\r\n                ],\r\n            ], \r\n           fullName: [\r\n               '',\r\n               [\r\n                   Validators.required,\r\n                   Validators.maxLength(40),\r\n                   Validators.minLength(2)\r\n                ]\r\n            ], \r\n           userName: [\r\n               '', \r\n               [\r\n                   Validators.required,\r\n                   Validators.maxLength(30),\r\n                   Validators.minLength(2),\r\n                   lowCaseValidator\r\n                ],\r\n                this.userNotTakenValidatorService.usuarioExiste()\r\n            ], \r\n           password: [\r\n               '', \r\n               [\r\n                   Validators.required,\r\n                   Validators.minLength(6),\r\n                   Validators.maxLength(30)\r\n                ]\r\n            ], \r\n        },{\r\n            validator: passwordUserNamevalidator\r\n        })\r\n    }\r\n\r\n\r\n    submit(){\r\n        const newUser = this.signupForm.getRawValue() as NewUser\r\n        this.signupService.signup(newUser)\r\n            .subscribe(()=> this.router.navigate(['']),\r\n                        error => console.log(error)\r\n            )\r\n    }\r\n\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { NewUser } from './new-user';\r\nimport { environment } from '../../../environments/environment';\r\n\r\nconst api_base = environment.urlBase; \r\n\r\n@Injectable()\r\nexport class SignupService {\r\n\r\n    constructor(private http: HttpClient) {}\r\n\r\n    checkUserName(userName: string){\r\n        return this.http.get(`${api_base}user/exists/${userName}`);\r\n    }\r\n\r\n    signup(newUser: NewUser){\r\n        return this.http.post(`${api_base}user/signup`, newUser);\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { AbstractControl } from '@angular/forms';\r\nimport { debounceTime, switchMap, map, first } from 'rxjs/operators';\r\n\r\nimport { SignupService } from './signup.service';\r\n\r\n@Injectable()\r\nexport class UserNotTakenValidatorService {\r\n\r\n    constructor(private signupService: SignupService){}\r\n\r\n    usuarioExiste(){\r\n        return (control: AbstractControl) => {\r\n            return control.valueChanges.pipe(\r\n                    debounceTime(500)\r\n                ).pipe(\r\n                    switchMap(userName =>\r\n                        this.signupService.checkUserName(userName)\r\n                )).pipe(\r\n                    map(existe => existe ? { userName: true } : null)\r\n                ).pipe(\r\n                    first()\r\n                );\r\n    }\r\n    }\r\n}","import { AbstractControl } from '@angular/forms';\r\n\r\nexport function lowCaseValidator(control: AbstractControl){\r\n\r\n    if(control.value.trim() && !/^[a-z0-9_\\-]+$/.test(control.value)) {\r\n        return {lowcase: true};\r\n    }\r\n    return null;\r\n}"],"sourceRoot":""}